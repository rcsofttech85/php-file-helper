#!/usr/bin/env php
<?php

use rcsofttech85\FileHandler\DI\ServiceContainer;
use rcsofttech85\FileHandler\Exception\FileHandlerException;
use rcsofttech85\FileHandler\JsonFileHandler;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;

require 'vendor/autoload.php';

$command = (new SingleCommandApplication())
    ->addArgument('jsonFile', InputArgument::REQUIRED, 'json file name')
    ->addOption('hide-column', null, InputOption::VALUE_REQUIRED, 'Columns to hide (comma-separated)')
    ->addOption('limit', null, InputOption::VALUE_REQUIRED, 'limit number of records')
    ->setCode(function (InputInterface $input, OutputInterface $output): int {
        $io = new SymfonyStyle($input, $output);
        $jsonFile = $input->getArgument('jsonFile');
        $limit = $input->getOption('limit');
        $hiddenColumns = $input->getOption('hide-column');
        $hiddenColumns = $hiddenColumns ? explode(',', $hiddenColumns) : false;

        if (!file_exists($jsonFile)) {
            $io->error("{$jsonFile} does not exists");
            return Command::FAILURE;
        }

        $serviceContainer = new ServiceContainer();
        /** @var JsonFileHandler $jsonFileHandler */
        $jsonFileHandler = $serviceContainer->getContainerBuilder()->get('json_file_handler');

        if (isset($limit) && !is_numeric($limit)) {
            $io->error("{$limit} is not numeric");
            return Command::FAILURE;
        }

        $limit = $limit ? (int)$limit : false;
        $headers = [];
        try {
            $data = $jsonFileHandler->toArray(
                filename: $jsonFile,
                headers: $headers,
                hideColumns: $hiddenColumns,
                limit: $limit
            );
        } catch (FileHandlerException) {
            $io->error('invalid json file');
            $io->writeln(
                '
                Expected Format
  =======================================
    
  [
     
    {
      "title": "The Catcher in the Rye",
      "author": "J.D. Salinger",
      "published_year": 1951
    },
    {
      "title": "To Kill a Mockingbird",
      "author": "Harper Lee",
      "published_year": 1960
    },
    {
      "title": "1984",
      "author": "George Orwell",
      "published_year": 1949
    }
    
  ]


               
  
  =======================================
            
         '
            );
            return Command::FAILURE;
        }


        $io->title($jsonFile);
        $table = $io->createTable();
        $table->setHeaders($headers);
        $table->setRows($data);
        $table->render();
        $io->newLine();

        return Command::SUCCESS;
    })->run();
