#!/usr/bin/env php
<?php

require 'vendor/autoload.php';

use Rcsofttech85\FileHandler\CsvFileHandler;
use Rcsofttech85\FileHandler\DependencyInjection\ServiceContainer;
use Rcsofttech85\FileHandler\Exception\FileHandlerException;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;

$command = (new SingleCommandApplication())
    ->addArgument('csvFile', InputArgument::REQUIRED, 'csv file name')
    ->addOption('hide-column', null, InputOption::VALUE_REQUIRED, 'Columns to hide (comma-separated)')
    ->addOption('limit', null, InputOption::VALUE_REQUIRED, 'limit number of records')
    ->setCode(function (InputInterface $input, OutputInterface $output): int {
        $io = new SymfonyStyle($input, $output);
        $csvFile = $input->getArgument('csvFile');
        $hiddenColumns = $input->getOption('hide-column');
        $limit = $input->getOption('limit');

        if (!file_exists($csvFile)) {
            $io->error("{$csvFile} does not exists");
            return Command::FAILURE;
        }

        if (isset($limit) && !is_numeric($limit)) {
            $io->error("{$limit} is not numeric");
            return Command::FAILURE;
        }

        $hiddenColumns = $hiddenColumns ? explode(',', $hiddenColumns) : false;
        $limit = $limit ? (int)$limit : false;

        $serviceContainer = new ServiceContainer();
        /** @var CsvFileHandler $csvFileHandler */
        $csvFileHandler = $serviceContainer->getContainerBuilder()->get('csv_file_handler');

        try {
            $data = $csvFileHandler->toArray($csvFile, $hiddenColumns, $limit);
        } catch (FileHandlerException) {
            $io->error('invalid csv file');
            return Command::FAILURE;
        }

        $headers = array_keys(reset($data));
        $io->title($csvFile);
        $table = $io->createTable();
        $table->setHeaders($headers);
        $table->setRows($data);
        $table->render();
        $io->newLine();

        return Command::SUCCESS;
    })->run();
